/**
 * BrushBase - –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∫–∏—Å—Ç–µ–π
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–∏—Å—Ç–µ–π
 */
class BrushBase {
    constructor() {
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∏—Å—Ç–∏
        this.name = 'Base Brush';
        this.description = '–ë–∞–∑–æ–≤–∞—è –∫–∏—Å—Ç—å';
        this.category = 'basic';
        this.version = '1.0.0';
        this.author = 'ArtFlow';
        this.icon = 'üñåÔ∏è';
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∏—Å—Ç–∏
        this.size = 20;
        this.opacity = 1.0;
        this.hardness = 1.0;
        this.flow = 1.0;
        this.spacing = 0.1;
        this.angle = 0;
        this.roundness = 1.0;
        
        // –¶–≤–µ—Ç–∞
        this.primaryColor = '#000000';
        this.secondaryColor = '#ffffff';
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.lastX = 0;
        this.lastY = 0;
        this.lastPressure = 0;
        this.distance = 0;
        this.isDrawing = false;
        
        // –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        this.cache = new Map();
        this.cacheSize = 100;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
     * –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
     */
    draw(ctx, x, y, pressure = 1, options = {}) {
        throw new Error('–ú–µ—Ç–æ–¥ draw() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ');
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∏—Å—Ç–∏
     * –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    getParameters() {
        return {
            size: {
                min: 1,
                max: 100,
                default: this.size,
                name: '–†–∞–∑–º–µ—Ä',
                type: 'range'
            },
            opacity: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.opacity,
                name: '–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å',
                type: 'range'
            },
            hardness: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.hardness,
                name: '–ñ–µ—Å—Ç–∫–æ—Å—Ç—å',
                type: 'range'
            },
            flow: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.flow,
                name: '–ü–æ—Ç–æ–∫',
                type: 'range'
            },
            spacing: {
                min: 0.01,
                max: 2,
                step: 0.01,
                default: this.spacing,
                name: '–ò–Ω—Ç–µ—Ä–≤–∞–ª',
                type: 'range'
            }
        };
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∏—Å—Ç–∏
     */
    setParameter(name, value) {
        if (this.hasOwnProperty(name)) {
            this[name] = value;
            this.clearCache();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∏—Å—Ç–∏
     */
    getParameter(name) {
        return this[name];
    }

    /**
     * –ù–∞—á–∞–ª–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
     */
    startDrawing(x, y, pressure = 1) {
        this.isDrawing = true;
        this.lastX = x;
        this.lastY = y;
        this.lastPressure = pressure;
        this.distance = 0;
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
     */
    stopDrawing() {
        this.isDrawing = false;
        this.distance = 0;
    }

    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
     */
    drawLine(ctx, x1, y1, x2, y2, pressure1 = 1, pressure2 = 1) {
        const dx = x2 - x1;
        const dy = y2 - y1;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —à–∞–≥ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∏—Å—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        const step = this.size * this.spacing;
        const steps = Math.max(1, Math.ceil(distance / step));
        
        for (let i = 0; i <= steps; i++) {
            const t = i / steps;
            const x = x1 + dx * t;
            const y = y1 + dy * t;
            const pressure = pressure1 + (pressure2 - pressure1) * t;
            
            // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            const pointDistance = Math.sqrt(
                (x - this.lastX) ** 2 + (y - this.lastY) ** 2
            );
            
            if (pointDistance >= step || i === steps) {
                this.draw(ctx, x, y, pressure);
                this.lastX = x;
                this.lastY = y;
                this.lastPressure = pressure;
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –∫–∏—Å—Ç–∏
     */
    createBrushGradient(ctx, x, y, size, hardness, opacity) {
        const gradient = ctx.createRadialGradient(x, y, 0, x, y, size);
        
        if (hardness >= 1) {
            gradient.addColorStop(0, `rgba(0, 0, 0, ${opacity})`);
            gradient.addColorStop(1, `rgba(0, 0, 0, 0)`);
        } else {
            const innerSize = size * hardness;
            const outerOpacity = opacity * (1 - hardness);
            
            gradient.addColorStop(0, `rgba(0, 0, 0, ${opacity})`);
            gradient.addColorStop(innerSize / size, `rgba(0, 0, 0, ${opacity * hardness})`);
            gradient.addColorStop(1, `rgba(0, 0, 0, ${outerOpacity})`);
        }
        
        return gradient;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ canvas
     */
    applyBrushSettings(ctx, options = {}) {
        const globalCompositeOperation = options.globalCompositeOperation || 'source-over';
        const globalAlpha = options.globalAlpha || this.opacity;
        
        ctx.globalCompositeOperation = globalCompositeOperation;
        ctx.globalAlpha = globalAlpha;
    }

    /**
     * –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ canvas
     */
    resetBrushSettings(ctx) {
        ctx.globalCompositeOperation = 'source-over';
        ctx.globalAlpha = 1;
    }

    /**
     * –°–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
     */
    blendColors(color1, color2, ratio) {
        const hex1 = color1.replace('#', '');
        const hex2 = color2.replace('#', '');
        
        const r1 = parseInt(hex1.substr(0, 2), 16);
        const g1 = parseInt(hex1.substr(2, 2), 16);
        const b1 = parseInt(hex1.substr(4, 2), 16);
        
        const r2 = parseInt(hex2.substr(0, 2), 16);
        const g2 = parseInt(hex2.substr(2, 2), 16);
        const b2 = parseInt(hex2.substr(4, 2), 16);
        
        const r = Math.round(r1 + (r2 - r1) * ratio);
        const g = Math.round(g1 + (g2 - g1) * ratio);
        const b = Math.round(b1 + (b2 - b1) * ratio);
        
        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    }

    /**
     * –û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
     */
    lightenColor(color, percent) {
        const hex = color.replace('#', '');
        const r = parseInt(hex.substr(0, 2), 16);
        const g = parseInt(hex.substr(2, 2), 16);
        const b = parseInt(hex.substr(4, 2), 16);
        
        const newR = Math.min(255, Math.round(r + (255 - r) * percent / 100));
        const newG = Math.min(255, Math.round(g + (255 - g) * percent / 100));
        const newB = Math.min(255, Math.round(b + (255 - b) * percent / 100));
        
        return `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;
    }

    /**
     * –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
     */
    darkenColor(color, percent) {
        const hex = color.replace('#', '');
        const r = parseInt(hex.substr(0, 2), 16);
        const g = parseInt(hex.substr(2, 2), 16);
        const b = parseInt(hex.substr(4, 2), 16);
        
        const newR = Math.max(0, Math.round(r * (100 - percent) / 100));
        const newG = Math.max(0, Math.round(g * (100 - percent) / 100));
        const newB = Math.max(0, Math.round(b * (100 - percent) / 100));
        
        return `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
     */
    random(min, max) {
        return Math.random() * (max - min) + min;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
     */
    randomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    /**
     * –®—É–º –ü–µ—Ä–ª–∏–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    noise(x, y) {
        const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;
        return n - Math.floor(n);
    }

    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    setCache(key, value) {
        if (this.cache.size >= this.cacheSize) {
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }
        this.cache.set(key, value);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
     */
    getCache(key) {
        return this.cache.get(key);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.clear();
    }

    /**
     * –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∏—Å—Ç–∏
     */
    clone() {
        const clone = new this.constructor();
        Object.assign(clone, this);
        clone.cache = new Map();
        return clone;
    }

    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∏—Å—Ç–∏
     */
    serialize() {
        return {
            name: this.name,
            size: this.size,
            opacity: this.opacity,
            hardness: this.hardness,
            flow: this.flow,
            spacing: this.spacing,
            angle: this.angle,
            roundness: this.roundness,
            primaryColor: this.primaryColor,
            secondaryColor: this.secondaryColor
        };
    }

    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∏—Å—Ç–∏
     */
    deserialize(data) {
        Object.assign(this, data);
        this.clearCache();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∏—Å—Ç–∏
     */
    getInfo() {
        return {
            name: this.name,
            description: this.description,
            category: this.category,
            version: this.version,
            author: this.author,
            icon: this.icon,
            parameters: this.getParameters()
        };
    }
}