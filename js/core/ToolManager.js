/**
 * ToolManager - –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏, –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
 */
class ToolManager {
    constructor(eventManager) {
        this.eventManager = eventManager;
        this.tools = new Map();
        this.activeTool = null;
        this.brushes = new Map();
        this.activeBrush = null;
        
        this.init();
    }

    init() {
        this.registerDefaultTools();
        this.registerDefaultBrushes();
        this.setupEventListeners();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.setActiveTool('brush');
        this.setActiveBrush('Sphere3DBrush');
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    registerDefaultTools() {
        const tools = [
            {
                id: 'brush',
                name: '–ö–∏—Å—Ç—å',
                icon: 'üñåÔ∏è',
                description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫–∏—Å—Ç—è–º–∏',
                cursor: 'crosshair',
                keyboardShortcut: 'b'
            },
            {
                id: 'eraser',
                name: '–õ–∞—Å—Ç–∏–∫',
                icon: 'üßΩ',
                description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ç–∏—Ä–∞–Ω–∏—è',
                cursor: 'crosshair',
                keyboardShortcut: 'e'
            },
            {
                id: 'shape',
                name: '–§–∏–≥—É—Ä—ã',
                icon: '‚¨ú',
                description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ñ–∏–≥—É—Ä',
                cursor: 'crosshair',
                keyboardShortcut: 's'
            },
            {
                id: 'text',
                name: '–¢–µ–∫—Å—Ç',
                icon: 'üìù',
                description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞',
                cursor: 'text',
                keyboardShortcut: 't'
            },
            {
                id: 'eyedropper',
                name: '–ü–∏–ø–µ—Ç–∫–∞',
                icon: 'üíß',
                description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞',
                cursor: 'crosshair',
                keyboardShortcut: 'i'
            },
            {
                id: 'fill',
                name: '–ó–∞–ª–∏–≤–∫–∞',
                icon: 'ü™£',
                description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π',
                cursor: 'crosshair',
                keyboardShortcut: 'g'
            }
        ];

        tools.forEach(tool => {
            this.registerTool(tool);
        });
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∏—Å—Ç–µ–π
     */
    registerDefaultBrushes() {
        // –ö–∏—Å—Ç–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ HTML, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        const brushClasses = [
            Sphere3DBrush,
            MetalBrush,
            GlassBrush,
            CeramicBrush,
            TextureBrush,
            GlowBrush
        ];

        brushClasses.forEach(BrushClass => {
            const brush = new BrushClass();
            this.registerBrush(brush);
        });
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    registerTool(tool) {
        if (this.tools.has(tool.id)) {
            console.warn(`–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å ID ${tool.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            return;
        }

        this.tools.set(tool.id, {
            ...tool,
            active: false,
            options: {}
        });
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∏—Å—Ç–∏
     */
    registerBrush(brush) {
        const info = brush.getInfo();
        this.brushes.set(info.name, {
            instance: brush,
            info: info,
            active: false
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    setActiveTool(toolId) {
        if (!this.tools.has(toolId)) {
            console.error(`–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å ID ${toolId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        if (this.activeTool) {
            this.tools.get(this.activeTool).active = false;
        }

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        this.activeTool = toolId;
        this.tools.get(toolId).active = true;

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateToolUI();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        this.eventManager.emit('toolChanged', {
            tool: toolId,
            toolInfo: this.getToolInfo(toolId)
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∏—Å—Ç–∏
     */
    setActiveBrush(brushName) {
        if (!this.brushes.has(brushName)) {
            console.error(`–ö–∏—Å—Ç—å —Å –∏–º–µ–Ω–µ–º ${brushName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return;
        }

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∏—Å—Ç—å
        if (this.activeBrush) {
            this.brushes.get(this.activeBrush).active = false;
        }

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∏—Å—Ç—å
        this.activeBrush = brushName;
        this.brushes.get(brushName).active = true;

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateBrushUI();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        this.eventManager.emit('brushChanged', {
            brush: brushName,
            brushInfo: this.getBrushInfo(brushName)
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
     */
    getToolInfo(toolId) {
        return this.tools.get(toolId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∏—Å—Ç–∏
     */
    getBrushInfo(brushName) {
        const brush = this.brushes.get(brushName);
        return brush ? brush.info : null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    getActiveTool() {
        return this.activeTool;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∏—Å—Ç–∏
     */
    getActiveBrush() {
        return this.activeBrush;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∏—Å—Ç–∏
     */
    getActiveBrushInstance() {
        if (!this.activeBrush) return null;
        const brush = this.brushes.get(this.activeBrush);
        return brush ? brush.instance : null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    getAllTools() {
        return Array.from(this.tools.values());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∏—Å—Ç–µ–π
     */
    getAllBrushes() {
        return Array.from(this.brushes.values());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∏—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getBrushesByCategory(category) {
        return Array.from(this.brushes.values())
            .filter(brush => brush.info.category === category);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∏—Å—Ç–µ–π
     */
    getBrushCategories() {
        const categories = new Set();
        this.brushes.forEach(brush => {
            categories.add(brush.info.category);
        });
        return Array.from(categories);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    updateToolUI() {
        const toolButtons = document.querySelectorAll('.tool-btn');
        toolButtons.forEach(button => {
            const toolId = button.dataset.tool;
            button.classList.toggle('active', toolId === this.activeTool);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–∏—Å—Ç–µ–π
     */
    updateBrushUI() {
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∏—Å—Ç–µ–π
        const brushList = document.getElementById('brushList');
        if (brushList) {
            brushList.innerHTML = '';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∏—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const categories = this.getBrushCategories();
            categories.forEach(category => {
                const brushes = this.getBrushesByCategory(category);
                if (brushes.length > 0) {
                    this.createBrushCategoryUI(category, brushes, brushList);
                }
            });
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∏—Å—Ç–µ–π
     */
    createBrushCategoryUI(category, brushes, container) {
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'brush-category';
        
        const categoryTitle = document.createElement('h4');
        categoryTitle.className = 'category-title';
        categoryTitle.textContent = this.getCategoryDisplayName(category);
        categoryDiv.appendChild(categoryTitle);
        
        const categoryBrushes = document.createElement('div');
        categoryBrushes.className = 'category-brushes';
        
        brushes.forEach(brush => {
            const brushItem = this.createBrushItemUI(brush);
            categoryBrushes.appendChild(brushItem);
        });
        
        categoryDiv.appendChild(categoryBrushes);
        container.appendChild(categoryDiv);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∏—Å—Ç–∏
     */
    createBrushItemUI(brush) {
        const brushItem = document.createElement('div');
        brushItem.className = `brush-item ${brush.active ? 'active' : ''}`;
        brushItem.dataset.brush = brush.info.name;
        
        brushItem.innerHTML = `
            <span class="brush-icon">${brush.info.icon}</span>
            <div class="brush-info">
                <div class="brush-name">${brush.info.name}</div>
                <div class="brush-description">${brush.info.description}</div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        brushItem.addEventListener('click', () => {
            this.setActiveBrush(brush.info.name);
        });
        
        return brushItem;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getCategoryDisplayName(category) {
        const categoryNames = {
            'basic': '–ë–∞–∑–æ–≤—ã–µ',
            '3d-effects': '3D –≠—Ñ—Ñ–µ–∫—Ç—ã',
            'materials': '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
            'textures': '–¢–µ–∫—Å—Ç—É—Ä—ã',
            'effects': '–≠—Ñ—Ñ–µ–∫—Ç—ã'
        };
        
        return categoryNames[category] || category;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (event) => {
            const toolButton = event.target.closest('.tool-btn');
            if (toolButton) {
                const toolId = toolButton.dataset.tool;
                this.setActiveTool(toolId);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        this.eventManager.on('keydown', (data) => {
            if (data.ctrlKey || data.altKey || data.metaKey) return;
            
            const key = data.key.toLowerCase();
            
            // –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–µ
            this.tools.forEach((tool, toolId) => {
                if (tool.keyboardShortcut === key) {
                    this.setActiveTool(toolId);
                }
            });
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    setToolOptions(toolId, options) {
        if (!this.tools.has(toolId)) return;
        
        const tool = this.tools.get(toolId);
        tool.options = { ...tool.options, ...options };
        
        this.eventManager.emit('toolOptionsChanged', {
            tool: toolId,
            options: tool.options
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    getToolOptions(toolId) {
        if (!this.tools.has(toolId)) return {};
        return this.tools.get(toolId).options;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∏—Å—Ç–∏
     */
    updateActiveBrushParameter(parameter, value) {
        if (!this.activeBrush) return;
        
        const brush = this.brushes.get(this.activeBrush);
        if (brush && brush.instance) {
            brush.instance.setParameter(parameter, value);
            
            this.eventManager.emit('brushParameterChanged', {
                brush: this.activeBrush,
                parameter: parameter,
                value: value
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∏—Å—Ç–∏
     */
    getActiveBrushParameters() {
        if (!this.activeBrush) return {};
        
        const brush = this.brushes.get(this.activeBrush);
        return brush && brush.instance ? brush.instance.getParameters() : {};
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
     */
    isToolActive(toolId) {
        return this.activeTool === toolId;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∏—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π
     */
    isBrushActive(brushName) {
        return this.activeBrush === brushName;
    }

    /**
     * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –∫–∏—Å—Ç–∏
     */
    loadBrush(brushClass) {
        try {
            const brush = new brushClass();
            this.registerBrush(brush);
            this.updateBrushUI();
            
            this.eventManager.emit('brushLoaded', {
                brush: brush.getInfo().name,
                info: brush.getInfo()
            });
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∏—Å—Ç–∏:', error);
            return false;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    serialize() {
        return {
            activeTool: this.activeTool,
            activeBrush: this.activeBrush,
            tools: Array.from(this.tools.entries()).map(([id, tool]) => [id, {
                options: tool.options
            }]),
            brushes: Array.from(this.brushes.entries()).map(([name, brush]) => [name, {
                instance: brush.instance.serialize()
            }])
        };
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    deserialize(data) {
        if (data.activeTool) {
            this.setActiveTool(data.activeTool);
        }
        
        if (data.activeBrush) {
            this.setActiveBrush(data.activeBrush);
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∏—Å—Ç–µ–π
        if (data.brushes) {
            data.brushes.forEach(([name, brushData]) => {
                if (this.brushes.has(name)) {
                    const brush = this.brushes.get(name);
                    brush.instance.deserialize(brushData.instance);
                }
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            totalTools: this.tools.size,
            totalBrushes: this.brushes.size,
            activeTool: this.activeTool,
            activeBrush: this.activeBrush,
            categories: this.getBrushCategories()
        };
    }
}
