/**
 * Sphere3DBrush - 3D —Å—Ñ–µ—Ä–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–º–Ω—ã–µ —Å—Ñ–µ—Ä—ã —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–≤–µ—Ç–∞
 */
class Sphere3DBrush extends BrushBase {
    constructor() {
        super();
        this.name = '3D –°—Ñ–µ—Ä–∞';
        this.description = '–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–º–Ω—ã–µ —Å—Ñ–µ—Ä—ã —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 4 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã';
        this.category = '3d-effects';
        this.version = '1.0.0';
        this.author = 'ArtFlow Team';
        this.icon = 'üî¥';
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è 3D —ç—Ñ—Ñ–µ–∫—Ç–∞
        this.lightDirection = 'top-left';
        this.material = 'matte';
        this.specular = 0.5;
        this.roughness = 0.3;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∏—Å–æ–≤–∞–Ω–∏—è 3D —Å—Ñ–µ—Ä—ã
     */
    draw(ctx, x, y, pressure = 1, options = {}) {
        const radius = (options.size || this.size) * pressure;
        const color = options.color || this.primaryColor;
        const lightDirection = options.lightDirection || this.lightDirection;
        const material = options.material || this.material;
        
        this.createSphere(ctx, x, y, radius, color, lightDirection, material);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ 3D —Å—Ñ–µ—Ä—ã —Å –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
     */
    createSphere(ctx, x, y, radius, color, lightDirection, material) {
        ctx.save();
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Å—Ñ–µ—Ä—ã
        const gradient = this.createSphereGradient(ctx, x, y, radius, color, lightDirection);
        
        // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ñ–µ—Ä—É
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fill();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        if (material !== 'matte') {
            this.addSpecularHighlight(ctx, x, y, radius, color, lightDirection, material);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—è –¥–ª—è –±–æ–ª—å—à–µ–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        this.addEdgeHighlight(ctx, x, y, radius, color, lightDirection);
        
        ctx.restore();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –¥–ª—è 3D —Å—Ñ–µ—Ä—ã
     */
    createSphereGradient(ctx, x, y, radius, color, lightDirection) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        let lightOffsetX, lightOffsetY, shadowOffsetX, shadowOffsetY;
        
        switch (lightDirection) {
            case 'top-left':
                lightOffsetX = -radius * 0.3;
                lightOffsetY = -radius * 0.3;
                shadowOffsetX = radius * 0.2;
                shadowOffsetY = radius * 0.2;
                break;
            case 'top-right':
                lightOffsetX = radius * 0.3;
                lightOffsetY = -radius * 0.3;
                shadowOffsetX = -radius * 0.2;
                shadowOffsetY = radius * 0.2;
                break;
            case 'bottom-left':
                lightOffsetX = -radius * 0.3;
                lightOffsetY = radius * 0.3;
                shadowOffsetX = radius * 0.2;
                shadowOffsetY = -radius * 0.2;
                break;
            case 'bottom-right':
                lightOffsetX = radius * 0.3;
                lightOffsetY = radius * 0.3;
                shadowOffsetX = -radius * 0.2;
                shadowOffsetY = -radius * 0.2;
                break;
            default:
                lightOffsetX = -radius * 0.3;
                lightOffsetY = -radius * 0.3;
                shadowOffsetX = radius * 0.2;
                shadowOffsetY = radius * 0.2;
        }
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –æ—Å–≤–µ—â–µ–Ω–∏—è
        const gradient = ctx.createRadialGradient(
            x + lightOffsetX, y + lightOffsetY, 0,
            x + shadowOffsetX, y + shadowOffsetY, radius
        );
        
        // –û—Å–≤–µ—Ç–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –±–ª–∏–∫–∞
        const highlightColor = this.lightenColor(color, 60);
        // –¢–µ–º–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–Ω–∏
        const shadowColor = this.darkenColor(color, 40);
        
        gradient.addColorStop(0, highlightColor);
        gradient.addColorStop(0.3, this.lightenColor(color, 20));
        gradient.addColorStop(0.7, color);
        gradient.addColorStop(1, shadowColor);
        
        return gradient;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞
     */
    addSpecularHighlight(ctx, x, y, radius, color, lightDirection, material) {
        let highlightX, highlightY, highlightSize, highlightOpacity;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –±–ª–∏–∫–∞
        switch (lightDirection) {
            case 'top-left':
                highlightX = x - radius * 0.25;
                highlightY = y - radius * 0.25;
                break;
            case 'top-right':
                highlightX = x + radius * 0.25;
                highlightY = y - radius * 0.25;
                break;
            case 'bottom-left':
                highlightX = x - radius * 0.25;
                highlightY = y + radius * 0.25;
                break;
            case 'bottom-right':
                highlightX = x + radius * 0.25;
                highlightY = y + radius * 0.25;
                break;
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–ª–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        switch (material) {
            case 'glossy':
                highlightSize = radius * 0.15;
                highlightOpacity = 0.8;
                break;
            case 'metallic':
                highlightSize = radius * 0.2;
                highlightOpacity = 0.6;
                break;
            case 'plastic':
                highlightSize = radius * 0.12;
                highlightOpacity = 0.7;
                break;
            default:
                highlightSize = radius * 0.1;
                highlightOpacity = 0.5;
        }
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –±–ª–∏–∫–∞
        const highlightGradient = ctx.createRadialGradient(
            highlightX, highlightY, 0,
            highlightX, highlightY, highlightSize
        );
        
        highlightGradient.addColorStop(0, `rgba(255, 255, 255, ${highlightOpacity})`);
        highlightGradient.addColorStop(0.5, `rgba(255, 255, 255, ${highlightOpacity * 0.5})`);
        highlightGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
        
        ctx.fillStyle = highlightGradient;
        ctx.beginPath();
        ctx.arc(highlightX, highlightY, highlightSize, 0, Math.PI * 2);
        ctx.fill();
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫—Ä–∞–µ–≤
     */
    addEdgeHighlight(ctx, x, y, radius, color, lightDirection) {
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–Ω–∫—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫—Ä–∞—è —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç —Å–≤–µ—Ç–∞
        let edgeX, edgeY;
        
        switch (lightDirection) {
            case 'top-left':
                edgeX = x + radius * 0.8;
                edgeY = y + radius * 0.8;
                break;
            case 'top-right':
                edgeX = x - radius * 0.8;
                edgeY = y + radius * 0.8;
                break;
            case 'bottom-left':
                edgeX = x + radius * 0.8;
                edgeY = y - radius * 0.8;
                break;
            case 'bottom-right':
                edgeX = x - radius * 0.8;
                edgeY = y - radius * 0.8;
                break;
        }
        
        const edgeGradient = ctx.createRadialGradient(
            edgeX, edgeY, radius * 0.9,
            edgeX, edgeY, radius
        );
        
        edgeGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');
        edgeGradient.addColorStop(1, 'rgba(0, 0, 0, 0.3)');
        
        ctx.fillStyle = edgeGradient;
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fill();
    }

    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 3D —ç—Ñ—Ñ–µ–∫—Ç–∞
     */
    drawLine(ctx, x1, y1, x2, y2, pressure1 = 1, pressure2 = 1) {
        const dx = x2 - x1;
        const dy = y2 - y1;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        const step = this.size * this.spacing;
        const steps = Math.max(1, Math.ceil(distance / step));
        
        for (let i = 0; i <= steps; i++) {
            const t = i / steps;
            const x = x1 + dx * t;
            const y = y1 + dy * t;
            const pressure = pressure1 + (pressure2 - pressure1) * t;
            
            const pointDistance = Math.sqrt(
                (x - this.lastX) ** 2 + (y - this.lastY) ** 2
            );
            
            if (pointDistance >= step || i === steps) {
                this.draw(ctx, x, y, pressure);
                this.lastX = x;
                this.lastY = y;
                this.lastPressure = pressure;
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º getParameters –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 3D-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    getParameters() {
        const baseParams = super.getParameters();
        
        return {
            ...baseParams,
            lightDirection: {
                type: 'select',
                options: [
                    { value: 'top-left', label: '–°–≤–µ—Ä—Ö—É-—Å–ª–µ–≤–∞' },
                    { value: 'top-right', label: '–°–≤–µ—Ä—Ö—É-—Å–ø—Ä–∞–≤–∞' },
                    { value: 'bottom-left', label: '–°–Ω–∏–∑—É-—Å–ª–µ–≤–∞' },
                    { value: 'bottom-right', label: '–°–Ω–∏–∑—É-—Å–ø—Ä–∞–≤–∞' }
                ],
                default: this.lightDirection,
                name: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∞'
            },
            material: {
                type: 'select',
                options: [
                    { value: 'matte', label: '–ú–∞—Ç–æ–≤—ã–π' },
                    { value: 'glossy', label: '–ì–ª—è–Ω—Ü–µ–≤—ã–π' },
                    { value: 'metallic', label: '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π' },
                    { value: 'plastic', label: '–ü–ª–∞—Å—Ç–∏–∫' }
                ],
                default: this.material,
                name: '–ú–∞—Ç–µ—Ä–∏–∞–ª'
            },
            specular: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.specular,
                name: '–ë–ª–µ—Å–∫',
                type: 'range'
            },
            roughness: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.roughness,
                name: '–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å',
                type: 'range'
            }
        };
    }

    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º serialize –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è 3D-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    serialize() {
        const baseData = super.serialize();
        return {
            ...baseData,
            lightDirection: this.lightDirection,
            material: this.material,
            specular: this.specular,
            roughness: this.roughness
        };
    }

    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º deserialize –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è 3D-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    deserialize(data) {
        super.deserialize(data);
        this.lightDirection = data.lightDirection || 'top-left';
        this.material = data.material || 'matte';
        this.specular = data.specular || 0.5;
        this.roughness = data.roughness || 0.3;
    }
}