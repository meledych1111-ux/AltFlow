/**
 * ArtistBrushes - –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∏—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
 * –í–∫–ª—é—á–∞–µ—Ç –º–∞—Å–ª—è–Ω—ã–µ, –∞–∫–≤–∞—Ä–µ–ª—å–Ω—ã–µ, –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ –∏ –¥—Ä—É–≥–∏–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
 */

/**
 * OilPaintBrush - –∫–∏—Å—Ç—å –¥–ª—è –º–∞—Å–ª—è–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—É –º–∞—Å–ª—è–Ω—ã—Ö –∫—Ä–∞—Å–æ–∫ —Å –º–∞–∑–∫–∞–º–∏ –∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ–º
 */
class OilPaintBrush extends BrushBase {
    constructor() {
        super();
        this.name = '–ú–∞—Å–ª—è–Ω–∞—è –ö—Ä–∞—Å–∫–∞';
        this.description = '–ö–∏—Å—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã –º–∞—Å–ª—è–Ω—ã—Ö –∫—Ä–∞—Å–æ–∫ —Å –º–∞–∑–∫–∞–º–∏ –∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ–º';
        this.category = 'oil-paint';
        this.version = '1.0.0';
        this.author = 'ArtFlow Team';
        this.icon = 'üé®';
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞—Å–ª—è–Ω–æ–π –∫—Ä–∞—Å–∫–∏
        this.paintViscosity = 0.8;
        this.brushStroke = 'visible';
        this.colorMixing = 0.6;
        this.impastoEffect = 0.4;
        this.dryingLevel = 0.2;
        this.canvasTexture = 'linen';
    }

    draw(ctx, x, y, pressure = 1, options = {}) {
        const radius = (options.size || this.size) * pressure;
        const color = options.color || this.primaryColor;
        
        this.createOilPaintEffect(ctx, x, y, radius, color, pressure);
    }

    createOilPaintEffect(ctx, x, y, radius, color, pressure) {
        ctx.save();
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π –∫—Ä–∞—Å–∫–∏
        this.drawPaintBase(ctx, x, y, radius, color, pressure);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –º–∞–∑–∫–æ–≤
        this.addBrushStrokes(ctx, x, y, radius, color, pressure);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –∏–º–ø–∞—Å—Ç–æ (–æ–±—ä–µ–º–Ω—ã–µ –º–∞–∑–∫–∏)
        if (this.impastoEffect > 0) {
            this.addImpastoEffect(ctx, x, y, radius, color, pressure);
        }
        
        // –°–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        if (this.colorMixing > 0) {
            this.addColorMixing(ctx, x, y, radius, color, pressure);
        }
        
        // –¢–µ–∫—Å—Ç—É—Ä–∞ —Ö–æ–ª—Å—Ç–∞
        this.addCanvasTexture(ctx, x, y, radius, color, pressure);
        
        ctx.restore();
    }

    drawPaintBase(ctx, x, y, radius, color, pressure) {
        // –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–π —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π —Ü–≤–µ—Ç–∞
        const variation = 20 * (1 - this.dryingLevel);
        const baseColor = this.darkenColor(color, this.paintViscosity * 10);
        
        const gradient = ctx.createRadialGradient(x, y, 0, x, y, radius);
        gradient.addColorStop(0, this.lightenColor(baseColor, variation * 0.5));
        gradient.addColorStop(0.7, baseColor);
        gradient.addColorStop(1, this.darkenColor(baseColor, variation));
        
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fill();
    }

    addBrushStrokes(ctx, x, y, radius, color, pressure) {
        if (this.brushStroke === 'none') return;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –º–∞–∑–∫–æ–≤
        const strokeCount = Math.floor(radius * 3 * pressure);
        
        for (let i = 0; i < strokeCount; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = Math.random() * radius * 0.8;
            const strokeX = x + Math.cos(angle) * distance;
            const strokeY = y + Math.sin(angle) * distance;
            
            const strokeLength = radius * 0.3 * (0.5 + Math.random());
            const strokeWidth = radius * 0.1 * (0.3 + Math.random());
            const strokeAngle = angle + (Math.random() - 0.5) * Math.PI * 0.5;
            
            // –¶–≤–µ—Ç –º–∞–∑–∫–∞ —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
            const strokeBrightness = (Math.random() - 0.5) * 30 * (1 - this.dryingLevel);
            const strokeColor = strokeBrightness > 0
                ? this.lightenColor(color, strokeBrightness)
                : this.darkenColor(color, -strokeBrightness);
            
            // –†–∏—Å—É–µ–º –º–∞–∑–æ–∫
            ctx.strokeStyle = strokeColor;
            ctx.lineWidth = strokeWidth;
            ctx.lineCap = 'round';
            ctx.globalAlpha = 0.6;
            
            ctx.beginPath();
            ctx.moveTo(strokeX, strokeY);
            ctx.lineTo(
                strokeX + Math.cos(strokeAngle) * strokeLength,
                strokeY + Math.sin(strokeAngle) * strokeLength
            );
            ctx.stroke();
        }
        
        ctx.globalAlpha = 1;
    }

    addImpastoEffect(ctx, x, y, radius, color, pressure) {
        // –û–±—ä–µ–º–Ω—ã–µ –º–∞–∑–∫–∏ –∏–º–ø–∞—Å—Ç–æ
        const impastoIntensity = this.impastoEffect;
        
        for (let i = 0; i < 5; i++) {
            const angle = (i / 5) * Math.PI * 2 + Math.random() * 0.5;
            const distance = radius * 0.6 + Math.random() * radius * 0.3;
            const impastoX = x + Math.cos(angle) * distance;
            const impastoY = y + Math.sin(angle) * distance;
            
            const impastoSize = radius * 0.2 * (0.7 + Math.random() * 0.6);
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–º–Ω—ã–π –º–∞–∑–æ–∫
            const highlightColor = this.lightenColor(color, 25);
            const shadowColor = this.darkenColor(color, 25);
            
            const impastoGradient = ctx.createRadialGradient(
                impastoX - impastoSize * 0.3, impastoY - impastoSize * 0.3, 0,
                impastoX, impastoY, impastoSize
            );
            
            impastoGradient.addColorStop(0, highlightColor);
            impastoGradient.addColorStop(0.5, color);
            impastoGradient.addColorStop(1, shadowColor);
            
            ctx.fillStyle = impastoGradient;
            ctx.beginPath();
            ctx.arc(impastoX, impastoY, impastoSize, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    addColorMixing(ctx, x, y, radius, color, pressure) {
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
        const mixingRadius = radius * this.colorMixing;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∑–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–º–µ—à–∏–≤–∞–Ω–∏—è
        const neighborColors = [
            this.blendColors(color, '#FF6B6B', 0.3),
            this.blendColors(color, '#4ECDC4', 0.3),
            this.blendColors(color, '#45B7D1', 0.3)
        ];
        
        neighborColors.forEach((mixColor, index) => {
            const angle = (index / neighborColors.length) * Math.PI * 2;
            const mixX = x + Math.cos(angle) * mixingRadius;
            const mixY = y + Math.sin(angle) * mixingRadius;
            const mixSize = mixingRadius * 0.6;
            
            ctx.fillStyle = mixColor;
            ctx.globalAlpha = 0.3 * this.colorMixing;
            ctx.beginPath();
            ctx.arc(mixX, mixY, mixSize, 0, Math.PI * 2);
            ctx.fill();
        });
        
        ctx.globalAlpha = 1;
    }

    addCanvasTexture(ctx, x, y, radius, color, pressure) {
        // –¢–µ–∫—Å—Ç—É—Ä–∞ —Ö–æ–ª—Å—Ç–∞
        const textureIntensity = 0.1;
        const texturePoints = Math.floor(radius * radius * 0.05);
        
        ctx.globalCompositeOperation = 'multiply';
        
        for (let i = 0; i < texturePoints; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = Math.random() * radius;
            const textureX = x + Math.cos(angle) * distance;
            const textureY = y + Math.sin(angle) * distance;
            
            const size = 1 + Math.random() * 2;
            const brightness = (Math.random() - 0.5) * 15;
            
            const textureColor = brightness > 0
                ? this.darkenColor(color, brightness)
                : this.lightenColor(color, -brightness);
            
            ctx.fillStyle = textureColor;
            ctx.globalAlpha = textureIntensity;
            ctx.fillRect(textureX, textureY, size, size);
        }
        
        ctx.globalAlpha = 1;
        ctx.globalCompositeOperation = 'source-over';
    }

    getParameters() {
        const baseParams = super.getParameters();
        
        return {
            ...baseParams,
            paintViscosity: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.paintViscosity,
                name: '–í—è–∑–∫–æ—Å—Ç—å –∫—Ä–∞—Å–∫–∏',
                type: 'range'
            },
            brushStroke: {
                type: 'select',
                options: [
                    { value: 'visible', label: '–í–∏–¥–∏–º—ã–µ –º–∞–∑–∫–∏' },
                    { value: 'subtle', label: '–¢–æ–Ω–∫–∏–µ –º–∞–∑–∫–∏' },
                    { value: 'none', label: '–ë–µ–∑ –º–∞–∑–∫–æ–≤' }
                ],
                default: this.brushStroke,
                name: '–°—Ç–∏–ª—å –º–∞–∑–∫–æ–≤'
            },
            colorMixing: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.colorMixing,
                name: '–°–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤',
                type: 'range'
            },
            impastoEffect: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.impastoEffect,
                name: '–≠—Ñ—Ñ–µ–∫—Ç –∏–º–ø–∞—Å—Ç–æ',
                type: 'range'
            },
            dryingLevel: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.dryingLevel,
                name: '–£—Ä–æ–≤–µ–Ω—å –≤—ã—Å—ã—Ö–∞–Ω–∏—è',
                type: 'range'
            },
            canvasTexture: {
                type: 'select',
                options: [
                    { value: 'linen', label: '–õ—å–Ω—è–Ω–æ–π —Ö–æ–ª—Å—Ç' },
                    { value: 'cotton', label: '–•–ª–æ–ø–∫–æ–≤—ã–π —Ö–æ–ª—Å—Ç' },
                    { value: 'smooth', label: '–ì–ª–∞–¥–∫–∏–π' },
                    { value: 'rough', label: '–®–µ—Ä–æ—Ö–æ–≤–∞—Ç—ã–π' }
                ],
                default: this.canvasTexture,
                name: '–¢–µ–∫—Å—Ç—É—Ä–∞ —Ö–æ–ª—Å—Ç–∞'
            }
        };
    }

    serialize() {
        const baseData = super.serialize();
        return {
            ...baseData,
            paintViscosity: this.paintViscosity,
            brushStroke: this.brushStroke,
            colorMixing: this.colorMixing,
            impastoEffect: this.impastoEffect,
            dryingLevel: this.dryingLevel,
            canvasTexture: this.canvasTexture
        };
    }

    deserialize(data) {
        super.deserialize(data);
        this.paintViscosity = data.paintViscosity || 0.8;
        this.brushStroke = data.brushStroke || 'visible';
        this.colorMixing = data.colorMixing || 0.6;
        this.impastoEffect = data.impastoEffect || 0.4;
        this.dryingLevel = data.dryingLevel || 0.2;
        this.canvasTexture = data.canvasTexture || 'linen';
    }
}

/**
 * WatercolorBrush - –∫–∏—Å—Ç—å –¥–ª—è –∞–∫–≤–∞—Ä–µ–ª—å–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ, —Ç–µ–∫—É—á–∏–µ –º–∞–∑–∫–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è –≤–æ–¥—ã
 */
class WatercolorBrush extends BrushBase {
    constructor() {
        super();
        this.name = '–ê–∫–≤–∞—Ä–µ–ª—å';
        this.description = '–ö–∏—Å—Ç—å –¥–ª—è –∞–∫–≤–∞—Ä–µ–ª—å–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏, —Ç–µ–∫—É—á–∏–º–∏ –º–∞–∑–∫–∞–º–∏';
        this.category = 'watercolor';
        this.version = '1.0.0';
        this.author = 'ArtFlow Team';
        this.icon = 'üíß';
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–∫–≤–∞—Ä–µ–ª–∏
        this.waterAmount = 0.7;
        this.colorFlow = 0.6;
        this.pigmentGranulation = 0.4;
        this.backrunEffect = 0.3;
        this.paperTexture = 'cold-pressed';
        this.bleeding = 0.5;
        this.layering = 0.6;
    }

    draw(ctx, x, y, pressure = 1, options = {}) {
        const radius = (options.size || this.size) * pressure;
        const color = options.color || this.primaryColor;
        
        this.createWatercolorEffect(ctx, x, y, radius, color, pressure);
    }

    createWatercolorEffect(ctx, x, y, radius, color, pressure) {
        ctx.save();
        
        // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–¥—ã
        ctx.globalAlpha = this.waterAmount * pressure;
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π –∞–∫–≤–∞—Ä–µ–ª–∏
        this.drawWatercolorBase(ctx, x, y, radius, color, pressure);
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Ç–µ—á–µ–Ω–∏—è –≤–æ–¥—ã
        this.addWaterFlow(ctx, x, y, radius, color, pressure);
        
        // –ì—Ä–∞–Ω—É–ª—è—Ü–∏—è –ø–∏–≥–º–µ–Ω—Ç–∞
        if (this.pigmentGranulation > 0) {
            this.addPigmentGranulation(ctx, x, y, radius, color, pressure);
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ç–µ—á–µ–Ω–∏—è (backrun)
        if (this.backrunEffect > 0) {
            this.addBackrunEffect(ctx, x, y, radius, color, pressure);
        }
        
        // –¢–µ–∫—Å—Ç—É—Ä–∞ –±—É–º–∞–≥–∏
        this.addPaperTexture(ctx, x, y, radius, color, pressure);
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞—Å—Ç–µ–∫–∞–Ω–∏—è
        this.addBleedingEffect(ctx, x, y, radius, color, pressure);
        
        ctx.restore();
    }

    drawWatercolorBase(ctx, x, y, radius, color, pressure) {
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π —Ü–≤–µ—Ç–∞ –æ—Ç –≤–æ–¥—ã
        const waterDilution = this.waterAmount * 0.5;
        const baseColor = this.blendColors(color, '#FFFFFF', waterDilution);
        
        // –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–µ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∞–∫–≤–∞—Ä–µ–ª–∏
        for (let layer = 0; layer < 3; layer++) {
            const layerRadius = radius * (1 - layer * 0.2);
            const layerOpacity = (1 - layer * 0.3) * this.layering;
            const layerColor = layer === 0 ? baseColor : this.darkenColor(baseColor, layer * 10);
            
            ctx.globalAlpha = layerOpacity * pressure;
            
            const gradient = ctx.createRadialGradient(x, y, 0, x, y, layerRadius);
            gradient.addColorStop(0, layerColor);
            gradient.addColorStop(0.7, this.blendColors(layerColor, '#FFFFFF', 0.3));
            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(x, y, layerRadius, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    addWaterFlow(ctx, x, y, radius, color, pressure) {
        // –≠—Ñ—Ñ–µ–∫—Ç —Ç–µ—á–µ–Ω–∏—è –≤–æ–¥—ã
        const flowStrength = this.colorFlow;
        const flowDirections = 4;
        
        for (let i = 0; i < flowDirections; i++) {
            const angle = (i / flowDirections) * Math.PI * 2 + (Math.random() - 0.5) * 0.5;
            const flowDistance = radius * flowStrength * (0.5 + Math.random() * 0.5);
            
            const flowGradient = ctx.createLinearGradient(
                x, y,
                x + Math.cos(angle) * flowDistance,
                y + Math.sin(angle) * flowDistance
            );
            
            const flowColor = this.blendColors(color, '#FFFFFF', 0.4);
            flowGradient.addColorStop(0, flowColor);
            flowGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
            
            ctx.fillStyle = flowGradient;
            ctx.globalAlpha = 0.3 * flowStrength;
            
            ctx.beginPath();
            ctx.arc(x, y, radius * 0.8, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    addPigmentGranulation(ctx, x, y, radius, color, pressure) {
        // –ì—Ä–∞–Ω—É–ª—è—Ü–∏—è –ø–∏–≥–º–µ–Ω—Ç–∞ - —Å–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—É
        const granuleCount = Math.floor(radius * radius * 0.1 * this.pigmentGranulation);
        
        for (let i = 0; i < granuleCount; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = Math.random() * radius * 0.9;
            const granuleX = x + Math.cos(angle) * distance;
            const granuleY = y + Math.sin(angle) * distance;
            
            const granuleSize = 1 + Math.random() * 3;
            const granuleColor = this.darkenColor(color, 10 + Math.random() * 20);
            
            ctx.fillStyle = granuleColor;
            ctx.globalAlpha = 0.6 * this.pigmentGranulation;
            ctx.fillRect(granuleX, granuleY, granuleSize, granuleSize);
        }
    }

    addBackrunEffect(ctx, x, y, radius, color, pressure) {
        // –≠—Ñ—Ñ–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ç–µ—á–µ–Ω–∏—è - —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
        const backrunCount = Math.floor(Math.random() * 3) + 1;
        
        for (let i = 0; i < backrunCount; i++) {
            const backrunRadius = radius * (0.3 + Math.random() * 0.4);
            const backrunX = x + (Math.random() - 0.5) * radius;
            const backrunY = y + (Math.random() - 0.5) * radius;
            
            const backrunGradient = ctx.createRadialGradient(
                backrunX, backrunY, 0,
                backrunX, backrunY, backrunRadius
            );
            
            backrunGradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');
            backrunGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
            
            ctx.fillStyle = backrunGradient;
            ctx.globalAlpha = 0.4 * this.backrunEffect;
            ctx.beginPath();
            ctx.arc(backrunX, backrunY, backrunRadius, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    addPaperTexture(ctx, x, y, radius, color, pressure) {
        // –¢–µ–∫—Å—Ç—É—Ä–∞ –±—É–º–∞–≥–∏
        let textureIntensity;
        switch (this.paperTexture) {
            case 'hot-pressed':
                textureIntensity = 0.1;
                break;
            case 'cold-pressed':
                textureIntensity = 0.3;
                break;
            case 'rough':
                textureIntensity = 0.5;
                break;
            default:
                textureIntensity = 0.2;
        }
        
        const texturePoints = Math.floor(radius * radius * 0.2);
        
        ctx.globalCompositeOperation = 'multiply';
        
        for (let i = 0; i < texturePoints; i++) {
            const textureX = x + (Math.random() - 0.5) * radius * 2;
            const textureY = y + (Math.random() - 0.5) * radius * 2;
            
            const size = 0.5 + Math.random() * 1.5;
            const brightness = (Math.random() - 0.5) * 8;
            
            const textureColor = brightness > 0
                ? this.lightenColor('#FFFFFF', brightness)
                : this.darkenColor('#CCCCCC', -brightness);
            
            ctx.fillStyle = textureColor;
            ctx.globalAlpha = textureIntensity * Math.random();
            ctx.fillRect(textureX, textureY, size, size);
        }
        
        ctx.globalAlpha = 1;
        ctx.globalCompositeOperation = 'source-over';
    }

    addBleedingEffect(ctx, x, y, radius, color, pressure) {
        // –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞—Å—Ç–µ–∫–∞–Ω–∏—è –∫—Ä–∞—Å–∫–∏ –ø–æ –±—É–º–∞–≥–µ
        const bleedCount = Math.floor(this.bleeding * 8);
        
        for (let i = 0; i < bleedCount; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = radius * (1 + Math.random() * 0.5);
            
            const bleedX = x + Math.cos(angle) * distance;
            const bleedY = y + Math.sin(angle) * distance;
            
            const bleedSize = radius * 0.3 * (0.3 + Math.random() * 0.4);
            const bleedOpacity = this.bleeding * (0.2 + Math.random() * 0.3);
            
            const bleedGradient = ctx.createRadialGradient(
                bleedX, bleedY, 0,
                bleedX, bleedY, bleedSize
            );
            
            bleedGradient.addColorStop(0, this.blendColors(color, '#FFFFFF', 0.7));
            bleedGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
            
            ctx.fillStyle = bleedGradient;
            ctx.globalAlpha = bleedOpacity;
            ctx.beginPath();
            ctx.arc(bleedX, bleedY, bleedSize, 0, Math.PI * 2);
            ctx.fill();
        }
        
        ctx.globalAlpha = 1;
    }

    getParameters() {
        const baseParams = super.getParameters();
        
        return {
            ...baseParams,
            waterAmount: {
                min: 0.2,
                max: 1,
                step: 0.01,
                default: this.waterAmount,
                name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã',
                type: 'range'
            },
            colorFlow: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.colorFlow,
                name: '–¢–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞',
                type: 'range'
            },
            pigmentGranulation: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.pigmentGranulation,
                name: '–ì—Ä–∞–Ω—É–ª—è—Ü–∏—è –ø–∏–≥–º–µ–Ω—Ç–∞',
                type: 'range'
            },
            backrunEffect: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.backrunEffect,
                name: '–≠—Ñ—Ñ–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ç–µ—á–µ–Ω–∏—è',
                type: 'range'
            },
            paperTexture: {
                type: 'select',
                options: [
                    { value: 'hot-pressed', label: '–ì–ª–∞–¥–∫–∞—è (hot-pressed)' },
                    { value: 'cold-pressed', label: '–°—Ä–µ–¥–Ω—è—è (cold-pressed)' },
                    { value: 'rough', label: '–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–∞—è (rough)' }
                ],
                default: this.paperTexture,
                name: '–¢–µ–∫—Å—Ç—É—Ä–∞ –±—É–º–∞–≥–∏'
            },
            bleeding: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.bleeding,
                name: '–†–∞—Å—Ç–µ–∫–∞–Ω–∏–µ',
                type: 'range'
            },
            layering: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.layering,
                name: '–ù–∞–ª–æ–∂–µ–Ω–∏–µ —Å–ª–æ–µ–≤',
                type: 'range'
            }
        };
    }

    serialize() {
        const baseData = super.serialize();
        return {
            ...baseData,
            waterAmount: this.waterAmount,
            colorFlow: this.colorFlow,
            pigmentGranulation: this.pigmentGranulation,
            backrunEffect: this.backrunEffect,
            paperTexture: this.paperTexture,
            bleeding: this.bleeding,
            layering: this.layering
        };
    }

    deserialize(data) {
        super.deserialize(data);
        this.waterAmount = data.waterAmount || 0.7;
        this.colorFlow = data.colorFlow || 0.6;
        this.pigmentGranulation = data.pigmentGranulation || 0.4;
        this.backrunEffect = data.backrunEffect || 0.3;
        this.paperTexture = data.paperTexture || 'cold-pressed';
        this.bleeding = data.bleeding || 0.5;
        this.layering = data.layering || 0.6;
    }
}

/**
 * PastelBrush - –∫–∏—Å—Ç—å –¥–ª—è –ø–∞—Å—Ç–µ–ª—å–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏
 * –°–æ–∑–¥–∞–µ—Ç –º—è–≥–∫—É—é, –±–∞—Ä—Ö–∞—Ç–∏—Å—Ç—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –ø–∞—Å—Ç–µ–ª–∏
 */
class PastelBrush extends BrushBase {
    constructor() {
        super();
        this.name = '–ü–∞—Å—Ç–µ–ª—å';
        this.description = '–ö–∏—Å—Ç—å –¥–ª—è –ø–∞—Å—Ç–µ–ª—å–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏ —Å –º—è–≥–∫–æ–π, –±–∞—Ä—Ö–∞—Ç–∏—Å—Ç–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π';
        this.category = 'pastel';
        this.version = '1.0.0';
        this.author = 'ArtFlow Team';
        this.icon = 'üñçÔ∏è';
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞—Å—Ç–µ–ª–∏
        this.softness = 0.8;
        this.dustAmount = 0.6;
        this.paperTooth = 0.4;
        this.blending = 0.7;
        this.pastelType = 'soft';
        this.paperColor = '#F5F5DC';
        this.textureScale = 1.0;
    }

    draw(ctx, x, y, pressure = 1, options = {}) {
        const radius = (options.size || this.size) * pressure;
        const color = options.color || this.primaryColor;
        
        this.createPastelEffect(ctx, x, y, radius, color, pressure);
    }

    createPastelEffect(ctx, x, y, radius, color, pressure) {
        ctx.save();
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π –ø–∞—Å—Ç–µ–ª–∏
        this.drawPastelBase(ctx, x, y, radius, color, pressure);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –º—è–≥–∫–æ—Å—Ç–∏ –ø–∞—Å—Ç–µ–ª–∏
        this.addSoftnessEffect(ctx, x, y, radius, color, pressure);
        
        // –ü–∞—Å—Ç–µ–ª—å–Ω–∞—è –ø—ã–ª—å
        if (this.dustAmount > 0) {
            this.addPastelDust(ctx, x, y, radius, color, pressure);
        }
        
        // –ó—É–±—á–∞—Ç–æ—Å—Ç—å –±—É–º–∞–≥–∏
        if (this.paperTooth > 0) {
            this.addPaperTooth(ctx, x, y, radius, color, pressure);
        }
        
        // –°–º–µ—à–∏–≤–∞–Ω–∏–µ
        if (this.blending > 0) {
            this.addBlendingEffect(ctx, x, y, radius, color, pressure);
        }
        
        ctx.restore();
    }

    drawPastelBase(ctx, x, y, radius, color, pressure) {
        // –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–π –ø–∞—Å—Ç–µ–ª–∏ —Å –º—è–≥–∫–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const softnessFactor = this.softness;
        
        const gradient = ctx.createRadialGradient(x, y, 0, x, y, radius);
        gradient.addColorStop(0, this.lightenColor(color, 15 * softnessFactor));
        gradient.addColorStop(0.6, color);
        gradient.addColorStop(1, this.darkenColor(color, 25 * softnessFactor));
        
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fill();
    }

    addSoftnessEffect(ctx, x, y, radius, color, pressure) {
        // –ú—è–≥–∫–∏–µ –∫—Ä–∞—è –ø–∞—Å—Ç–µ–ª–∏
        const softness = this.softness;
        
        for (let i = 0; i < 5; i++) {
            const offset = (Math.random() - 0.5) * radius * 0.3;
            const softX = x + offset;
            const softY = y + offset;
            const softRadius = radius * (0.8 + Math.random() * 0.4);
            
            const softColor = this.blendColors(color, '#FFFFFF', 0.3 * softness);
            
            const gradient = ctx.createRadialGradient(softX, softY, 0, softX, softY, softRadius);
            gradient.addColorStop(0, softColor);
            gradient.addColorStop(0.7, 'rgba(255, 255, 255, 0)');
            
            ctx.fillStyle = gradient;
            ctx.globalAlpha = 0.2 * softness;
            ctx.beginPath();
            ctx.arc(softX, softY, softRadius, 0, Math.PI * 2);
            ctx.fill();
        }
        
        ctx.globalAlpha = 1;
    }

    addPastelDust(ctx, x, y, radius, color, pressure) {
        // –ü–∞—Å—Ç–µ–ª—å–Ω–∞—è –ø—ã–ª—å –≤–æ–∫—Ä—É–≥ –º–∞–∑–∫–∞
        const dustCount = Math.floor(radius * 2 * this.dustAmount);
        
        for (let i = 0; i < dustCount; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = radius * (1 + Math.random() * 0.5);
            
            const dustX = x + Math.cos(angle) * distance;
            const dustY = y + Math.sin(angle) * distance;
            
            const dustSize = 0.5 + Math.random() * 2;
            const dustOpacity = this.dustAmount * (0.1 + Math.random() * 0.3);
            
            ctx.fillStyle = color;
            ctx.globalAlpha = dustOpacity;
            ctx.fillRect(dustX, dustY, dustSize, dustSize);
        }
        
        ctx.globalAlpha = 1;
    }

    addPaperTooth(ctx, x, y, radius, color, pressure) {
        // –ó—É–±—á–∞—Ç–æ—Å—Ç—å –±—É–º–∞–≥–∏ - —Å–æ–∑–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –ø–∞—Å—Ç–µ–ª–∏
        const toothSize = 2 / this.textureScale;
        const toothCount = Math.floor(radius * radius * 0.5 * this.paperTooth);
        
        ctx.globalCompositeOperation = 'multiply';
        
        for (let i = 0; i < toothCount; i++) {
            const toothX = x + (Math.random() - 0.5) * radius * 2;
            const toothY = y + (Math.random() - 0.5) * radius * 2;
            
            const brightness = (Math.random() - 0.5) * 20;
            const toothColor = brightness > 0
                ? this.lightenColor(this.paperColor, brightness)
                : this.darkenColor(this.paperColor, -brightness);
            
            ctx.fillStyle = toothColor;
            ctx.globalAlpha = 0.3 * this.paperTooth;
            ctx.fillRect(toothX, toothY, toothSize, toothSize);
        }
        
        ctx.globalAlpha = 1;
        ctx.globalCompositeOperation = 'source-over';
    }

    addBlendingEffect(ctx, x, y, radius, color, pressure) {
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏—è –ø–∞—Å—Ç–µ–ª–∏
        const blendRadius = radius * this.blending;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
        const blendColors = [
            this.blendColors(color, '#FFFFFF', 0.4),
            this.blendColors(color, '#F5F5DC', 0.3),
            this.blendColors(color, '#FFE4E1', 0.2)
        ];
        
        blendColors.forEach((blendColor, index) => {
            const angle = (index / blendColors.length) * Math.PI * 2;
            const blendX = x + Math.cos(angle) * blendRadius * 0.5;
            const blendY = y + Math.sin(angle) * blendRadius * 0.5;
            
            const blendSize = blendRadius * (0.3 + Math.random() * 0.4);
            
            ctx.fillStyle = blendColor;
            ctx.globalAlpha = 0.3 * this.blending;
            ctx.beginPath();
            ctx.arc(blendX, blendY, blendSize, 0, Math.PI * 2);
            ctx.fill();
        });
        
        ctx.globalAlpha = 1;
    }

    getParameters() {
        const baseParams = super.getParameters();
        
        return {
            ...baseParams,
            softness: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.softness,
                name: '–ú—è–≥–∫–æ—Å—Ç—å',
                type: 'range'
            },
            dustAmount: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.dustAmount,
                name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—ã–ª–∏',
                type: 'range'
            },
            paperTooth: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.paperTooth,
                name: '–ó—É–±—á–∞—Ç–æ—Å—Ç—å –±—É–º–∞–≥–∏',
                type: 'range'
            },
            blending: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.blending,
                name: '–°–º–µ—à–∏–≤–∞–Ω–∏–µ',
                type: 'range'
            },
            pastelType: {
                type: 'select',
                options: [
                    { value: 'soft', label: '–ú—è–≥–∫–∞—è –ø–∞—Å—Ç–µ–ª—å' },
                    { value: 'hard', label: '–¢–≤–µ—Ä–¥–∞—è –ø–∞—Å—Ç–µ–ª—å' },
                    { value: 'oil', label: '–ú–∞—Å–ª—è–Ω–∞—è –ø–∞—Å—Ç–µ–ª—å' }
                ],
                default: this.pastelType,
                name: '–¢–∏–ø –ø–∞—Å—Ç–µ–ª–∏'
            },
            paperColor: {
                type: 'color',
                default: this.paperColor,
                name: '–¶–≤–µ—Ç –±—É–º–∞–≥–∏'
            },
            textureScale: {
                min: 0.5,
                max: 3,
                step: 0.1,
                default: this.textureScale,
                name: '–ú–∞—Å—à—Ç–∞–± —Ç–µ–∫—Å—Ç—É—Ä—ã',
                type: 'range'
            }
        };
    }

    serialize() {
        const baseData = super.serialize();
        return {
            ...baseData,
            softness: this.softness,
            dustAmount: this.dustAmount,
            paperTooth: this.paperTooth,
            blending: this.blending,
            pastelType: this.pastelType,
            paperColor: this.paperColor,
            textureScale: this.textureScale
        };
    }

    deserialize(data) {
        super.deserialize(data);
        this.softness = data.softness || 0.8;
        this.dustAmount = data.dustAmount || 0.6;
        this.paperTooth = data.paperTooth || 0.4;
        this.blending = data.blending || 0.7;
        this.pastelType = data.pastelType || 'soft';
        this.paperColor = data.paperColor || '#F5F5DC';
        this.textureScale = data.textureScale || 1.0;
    }
}

/**
 * CharcoalBrush - –∫–∏—Å—Ç—å –¥–ª—è —É–≥–æ–ª—å–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏
 * –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–Ω—É—é, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É —É–≥–ª—è
 */
class CharcoalBrush extends BrushBase {
    constructor() {
        super();
        this.name = '–£–≥–æ–ª—å';
        this.description = '–ö–∏—Å—Ç—å –¥–ª—è —É–≥–æ–ª—å–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏ —Å –≥—Ä–∞—Ñ–∏—á–Ω–æ–π, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π';
        this.category = 'charcoal';
        this.version = '1.0.0';
        this.author = 'ArtFlow Team';
        this.icon = 'üñ§';
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–≥–ª—è
        this.charcoalHardness = 0.3;
        this.smudgeAmount = 0.6;
        this.paperGrain = 0.7;
        this.contrast = 0.8;
        this.dustLevel = 0.4;
        this.fixativeLevel = 0.2;
        this.strokeDirection = 'random';
    }

    draw(ctx, x, y, pressure = 1, options = {}) {
        const radius = (options.size || this.size) * pressure;
        const color = options.color || this.primaryColor;
        
        this.createCharcoalEffect(ctx, x, y, radius, color, pressure);
    }

    createCharcoalEffect(ctx, x, y, radius, color, pressure) {
        ctx.save();
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π —É–≥–ª—è
        this.drawCharcoalBase(ctx, x, y, radius, color, pressure);
        
        // –¢–µ–∫—Å—Ç—É—Ä–∞ –±—É–º–∞–≥–∏
        this.addPaperGrain(ctx, x, y, radius, color, pressure);
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–º–∞–∑—ã–≤–∞–Ω–∏—è
        if (this.smudgeAmount > 0) {
            this.addSmudgeEffect(ctx, x, y, radius, color, pressure);
        }
        
        // –£–≥–æ–ª—å–Ω–∞—è –ø—ã–ª—å
        if (this.dustLevel > 0) {
            this.addCharcoalDust(ctx, x, y, radius, color, pressure);
        }
        
        // –ö–æ–Ω—Ç—Ä–∞—Å—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö–æ–≤
        this.addStrokeDirection(ctx, x, y, radius, color, pressure);
        
        ctx.restore();
    }

    drawCharcoalBase(ctx, x, y, radius, color, pressure) {
        // –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–π —É–≥–ª—è —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π —Ç–æ–Ω–∞
        const hardnessFactor = 1 - this.charcoalHardness;
        
        const gradient = ctx.createRadialGradient(x, y, 0, x, y, radius);
        gradient.addColorStop(0, this.darkenColor(color, 20 * hardnessFactor));
        gradient.addColorStop(0.5, color);
        gradient.addColorStop(1, this.lightenColor(color, 30 * hardnessFactor));
        
        ctx.fillStyle = gradient;
        ctx.globalAlpha = 0.8;
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fill();
        ctx.globalAlpha = 1;
    }

    addPaperGrain(ctx, x, y, radius, color, pressure) {
        // –ó—É–±—á–∞—Ç–æ—Å—Ç—å –±—É–º–∞–≥–∏ –¥–ª—è —É–≥–ª—è
        const grainSize = 2;
        const grainCount = Math.floor(radius * radius * 0.3 * this.paperGrain);
        
        ctx.globalCompositeOperation = 'multiply';
        
        for (let i = 0; i < grainCount; i++) {
            const grainX = x + (Math.random() - 0.5) * radius * 2;
            const grainY = y + (Math.random() - 0.5) * radius * 2;
            
            const brightness = (Math.random() - 0.5) * 40 * this.paperGrain;
            const grainColor = brightness > 0
                ? this.lightenColor('#FFFFFF', brightness)
                : this.darkenColor('#000000', -brightness);
            
            ctx.fillStyle = grainColor;
            ctx.globalAlpha = 0.4 * this.paperGrain;
            ctx.fillRect(grainX, grainY, grainSize, grainSize);
        }
        
        ctx.globalAlpha = 1;
        ctx.globalCompositeOperation = 'source-over';
    }

    addSmudgeEffect(ctx, x, y, radius, color, pressure) {
        // –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–º–∞–∑—ã–≤–∞–Ω–∏—è —É–≥–ª—è
        const smudgeCount = Math.floor(this.smudgeAmount * 8);
        
        for (let i = 0; i < smudgeCount; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = radius * (0.5 + Math.random() * 0.8);
            
            const smudgeX = x + Math.cos(angle) * distance;
            const smudgeY = y + Math.sin(angle) * distance;
            
            const smudgeLength = radius * 0.3 * (0.5 + Math.random());
            const smudgeWidth = radius * 0.05 * (0.3 + Math.random() * 0.7);
            
            // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–∞–∑—ã–≤–∞–Ω–∏—è
            const smudgeAngle = angle + Math.PI + (Math.random() - 0.5) * 0.5;
            
            ctx.strokeStyle = this.lightenColor(color, 20 + Math.random() * 20);
            ctx.lineWidth = smudgeWidth;
            ctx.globalAlpha = 0.3 * this.smudgeAmount;
            
            ctx.beginPath();
            ctx.moveTo(smudgeX, smudgeY);
            ctx.lineTo(
                smudgeX + Math.cos(smudgeAngle) * smudgeLength,
                smudgeY + Math.sin(smudgeAngle) * smudgeLength
            );
            ctx.stroke();
        }
        
        ctx.globalAlpha = 1;
    }

    addCharcoalDust(ctx, x, y, radius, color, pressure) {
        // –£–≥–æ–ª—å–Ω–∞—è –ø—ã–ª—å
        const dustCount = Math.floor(radius * 3 * this.dustLevel);
        
        for (let i = 0; i < dustCount; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = radius * (1 + Math.random() * 0.6);
            
            const dustX = x + Math.cos(angle) * distance;
            const dustY = y + Math.sin(angle) * distance;
            
            const dustSize = 0.5 + Math.random() * 2;
            const dustOpacity = this.dustLevel * (0.1 + Math.random() * 0.2);
            
            ctx.fillStyle = this.lightenColor(color, Math.random() * 40);
            ctx.globalAlpha = dustOpacity;
            ctx.fillRect(dustX, dustY, dustSize, dustSize);
        }
        
        ctx.globalAlpha = 1;
    }

    addStrokeDirection(ctx, x, y, radius, color, pressure) {
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã
        let baseAngle = 0;
        
        switch (this.strokeDirection) {
            case 'horizontal':
                baseAngle = 0;
                break;
            case 'vertical':
                baseAngle = Math.PI / 2;
                break;
            case 'diagonal':
                baseAngle = Math.PI / 4;
                break;
            case 'circular':
                // –ö—Ä—É–≥–æ–≤—ã–µ —à—Ç—Ä–∏—Ö–∏
                for (let i = 0; i < 8; i++) {
                    const angle = (i / 8) * Math.PI * 2;
                    const distance = radius * (0.3 + Math.random() * 0.4);
                    
                    const strokeX = x + Math.cos(angle) * distance;
                    const strokeY = y + Math.sin(angle) * distance;
                    
                    const strokeLength = radius * 0.2;
                    const strokeWidth = radius * 0.03;
                    
                    ctx.strokeStyle = this.darkenColor(color, 10 + Math.random() * 20);
                    ctx.lineWidth = strokeWidth;
                    ctx.globalAlpha = 0.4 * this.contrast;
                    
                    ctx.beginPath();
                    ctx.arc(strokeX, strokeY, strokeLength, angle - Math.PI/4, angle + Math.PI/4);
                    ctx.stroke();
                }
                return;
            case 'random':
            default:
                // –°–ª—É—á–∞–π–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                for (let i = 0; i < 12; i++) {
                    const angle = Math.random() * Math.PI * 2;
                    const distance = Math.random() * radius * 0.8;
                    
                    const strokeX = x + Math.cos(angle) * distance;
                    const strokeY = y + Math.sin(angle) * distance;
                    
                    const strokeLength = radius * 0.15 * (0.5 + Math.random());
                    const strokeWidth = radius * 0.02 * (0.5 + Math.random());
                    const strokeAngle = angle + (Math.random() - 0.5) * 0.5;
                    
                    ctx.strokeStyle = this.darkenColor(color, 15 + Math.random() * 25);
                    ctx.lineWidth = strokeWidth;
                    ctx.globalAlpha = 0.3 * this.contrast;
                    
                    ctx.beginPath();
                    ctx.moveTo(strokeX, strokeY);
                    ctx.lineTo(
                        strokeX + Math.cos(strokeAngle) * strokeLength,
                        strokeY + Math.sin(strokeAngle) * strokeLength
                    );
                    ctx.stroke();
                }
                ctx.globalAlpha = 1;
                return;
        }
        
        // –õ–∏–Ω–µ–π–Ω—ã–µ —à—Ç—Ä–∏—Ö–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        const strokeCount = Math.floor(radius * 2);
        
        for (let i = 0; i < strokeCount; i++) {
            const offset = (i / strokeCount - 0.5) * radius * 2;
            
            const strokeX = x + Math.cos(baseAngle + Math.PI/2) * offset;
            const strokeY = y + Math.sin(baseAngle + Math.PI/2) * offset;
            
            const strokeLength = radius * 0.3 * (0.7 + Math.random() * 0.6);
            const strokeWidth = radius * 0.01 * (0.5 + Math.random() * 0.5);
            
            ctx.strokeStyle = this.darkenColor(color, 10 + Math.random() * 30);
            ctx.lineWidth = strokeWidth;
            ctx.globalAlpha = 0.4 * this.contrast;
            
            ctx.beginPath();
            ctx.moveTo(
                strokeX - Math.cos(baseAngle) * strokeLength/2,
                strokeY - Math.sin(baseAngle) * strokeLength/2
            );
            ctx.lineTo(
                strokeX + Math.cos(baseAngle) * strokeLength/2,
                strokeY + Math.sin(baseAngle) * strokeLength/2
            );
            ctx.stroke();
        }
        
        ctx.globalAlpha = 1;
    }

    getParameters() {
        const baseParams = super.getParameters();
        
        return {
            ...baseParams,
            charcoalHardness: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.charcoalHardness,
                name: '–¢–≤–µ—Ä–¥–æ—Å—Ç—å —É–≥–ª—è',
                type: 'range'
            },
            smudgeAmount: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.smudgeAmount,
                name: '–†–∞–∑–º–∞–∑—ã–≤–∞–Ω–∏–µ',
                type: 'range'
            },
            paperGrain: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.paperGrain,
                name: '–ó–µ—Ä–Ω–æ –±—É–º–∞–≥–∏',
                type: 'range'
            },
            contrast: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.contrast,
                name: '–ö–æ–Ω—Ç—Ä–∞—Å—Ç',
                type: 'range'
            },
            dustLevel: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.dustLevel,
                name: '–£—Ä–æ–≤–µ–Ω—å –ø—ã–ª–∏',
                type: 'range'
            },
            fixativeLevel: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.fixativeLevel,
                name: '–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∫—Å–∞—Ü–∏–∏',
                type: 'range'
            },
            strokeDirection: {
                type: 'select',
                options: [
                    { value: 'random', label: '–°–ª—É—á–∞–π–Ω–æ–µ' },
                    { value: 'horizontal', label: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ' },
                    { value: 'vertical', label: '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ' },
                    { value: 'diagonal', label: '–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–µ' },
                    { value: 'circular', label: '–ö—Ä—É–≥–æ–≤–æ–µ' }
                ],
                default: this.strokeDirection,
                name: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö–æ–≤'
            }
        };
    }

    serialize() {
        const baseData = super.serialize();
        return {
            ...baseData,
            charcoalHardness: this.charcoalHardness,
            smudgeAmount: this.smudgeAmount,
            paperGrain: this.paperGrain,
            contrast: this.contrast,
            dustLevel: this.dustLevel,
            fixativeLevel: this.fixativeLevel,
            strokeDirection: this.strokeDirection
        };
    }

    deserialize(data) {
        super.deserialize(data);
        this.charcoalHardness = data.charcoalHardness || 0.3;
        this.smudgeAmount = data.smudgeAmount || 0.6;
        this.paperGrain = data.paperGrain || 0.7;
        this.contrast = data.contrast || 0.8;
        this.dustLevel = data.dustLevel || 0.4;
        this.fixativeLevel = data.fixativeLevel || 0.2;
        this.strokeDirection = data.strokeDirection || 'random';
    }
}

/**
 * InkBrush - –∫–∏—Å—Ç—å –¥–ª—è —Ç—É—à–µ–≤–æ–π –∂–∏–≤–æ–ø–∏—Å–∏
 * –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–Ω—ã–µ, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ –º–∞–∑–∫–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ç—É—à–∏
 */
class InkBrush extends BrushBase {
    constructor() {
        super();
        this.name = '–¢—É—à—å';
        this.description = '–ö–∏—Å—Ç—å –¥–ª—è —Ç—É—à–µ–≤–æ–π –∂–∏–≤–æ–ø–∏—Å–∏ —Å –≥—Ä–∞—Ñ–∏—á–Ω—ã–º–∏, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º–∏ –º–∞–∑–∫–∞–º–∏';
        this.category = 'ink';
        this.version = '1.0.0';
        this.author = 'ArtFlow Team';
        this.icon = 'üñãÔ∏è';
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—É—à–∏
        this.inkFlow = 0.8;
        this.brushSaturation = 0.9;
        this.paperAbsorption = 0.6;
        this.bleeding = 0.3;
        this.lineVariation = 0.7;
        this.dryBrushEffect = 0.4;
        this.inkDensity = 0.95;
    }

    draw(ctx, x, y, pressure = 1, options = {}) {
        const radius = (options.size || this.size) * pressure;
        const color = options.color || this.primaryColor;
        
        this.createInkEffect(ctx, x, y, radius, color, pressure);
    }

    createInkEffect(ctx, x, y, radius, color, pressure) {
        ctx.save();
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π —Ç—É—à–∏
        this.drawInkBase(ctx, x, y, radius, color, pressure);
        
        // –í–∞—Ä–∏–∞—Ü–∏—è –ª–∏–Ω–∏–∏
        this.addLineVariation(ctx, x, y, radius, color, pressure);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –≤–ø–∏—Ç—ã–≤–∞–Ω–∏—è –±—É–º–∞–≥–æ–π
        this.addPaperAbsorption(ctx, x, y, radius, color, pressure);
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å—É—Ö–æ–π –∫–∏—Å—Ç–∏
        if (this.dryBrushEffect > 0) {
            this.addDryBrushEffect(ctx, x, y, radius, color, pressure);
        }
        
        // –†–∞—Å—Ç–µ–∫–∞–Ω–∏–µ —Ç—É—à–∏
        if (this.bleeding > 0) {
            this.addInkBleeding(ctx, x, y, radius, color, pressure);
        }
        
        ctx.restore();
    }

    drawInkBase(ctx, x, y, radius, color, pressure) {
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π —Ç—É—à–∏ —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        const inkColor = this.darkenColor(color, (1 - this.inkDensity) * 50);
        
        // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—è—Ç–Ω–æ
        ctx.fillStyle = inkColor;
        ctx.globalAlpha = this.inkDensity;
        ctx.beginPath();
        ctx.arc(x, y, radius * 0.8, 0, Math.PI * 2);
        ctx.fill();
        ctx.globalAlpha = 1;
    }

    addLineVariation(ctx, x, y, radius, color, pressure) {
        // –í–∞—Ä–∏–∞—Ü–∏—è —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏
        const variationCount = Math.floor(radius * 2 * this.lineVariation);
        
        for (let i = 0; i < variationCount; i++) {
            const angle = (i / variationCount) * Math.PI * 2;
            const baseDistance = radius * 0.7;
            const variationDistance = baseDistance * (0.7 + Math.random() * 0.6);
            
            const lineX = x + Math.cos(angle) * variationDistance;
            const lineY = y + Math.sin(angle) * variationDistance;
            
            const lineLength = radius * 0.2 * (0.5 + Math.random());
            const lineWidth = radius * 0.03 * (0.3 + Math.random() * 0.7);
            const lineAngle = angle + Math.PI + (Math.random() - 0.5) * 0.5;
            
            ctx.strokeStyle = this.darkenColor(color, 10 + Math.random() * 20);
            ctx.lineWidth = lineWidth;
            ctx.globalAlpha = 0.6 * this.lineVariation;
            
            ctx.beginPath();
            ctx.moveTo(lineX, lineY);
            ctx.lineTo(
                lineX + Math.cos(lineAngle) * lineLength,
                lineY + Math.sin(lineAngle) * lineLength
            );
            ctx.stroke();
        }
        
        ctx.globalAlpha = 1;
    }

    addPaperAbsorption(ctx, x, y, radius, color, pressure) {
        // –≠—Ñ—Ñ–µ–∫—Ç –≤–ø–∏—Ç—ã–≤–∞–Ω–∏—è —Ç—É—à–∏ –±—É–º–∞–≥–æ–π
        const absorptionRadius = radius * this.paperAbsorption;
        
        const absorptionGradient = ctx.createRadialGradient(
            x, y, radius * 0.8,
            x, y, radius * 0.8 + absorptionRadius
        );
        
        absorptionGradient.addColorStop(0, this.darkenColor(color, 10));
        absorptionGradient.addColorStop(0.5, this.blendColors(color, '#8B4513', 0.3));
        absorptionGradient.addColorStop(1, 'rgba(139, 69, 19, 0)');
        
        ctx.fillStyle = absorptionGradient;
        ctx.globalAlpha = 0.4 * this.paperAbsorption;
        ctx.beginPath();
        ctx.arc(x, y, radius * 0.8 + absorptionRadius, 0, Math.PI * 2);
        ctx.fill();
        ctx.globalAlpha = 1;
    }

    addDryBrushEffect(ctx, x, y, radius, color, pressure) {
        // –≠—Ñ—Ñ–µ–∫—Ç —Å—É—Ö–æ–π –∫–∏—Å—Ç–∏ - –ø—Ä–µ—Ä—ã–≤–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏
        const dryCount = Math.floor(radius * 3 * this.dryBrushEffect);
        
        for (let i = 0; i < dryCount; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = radius * (0.4 + Math.random() * 0.6);
            
            const dryX = x + Math.cos(angle) * distance;
            const dryY = y + Math.sin(angle) * distance;
            
            const dryLength = radius * 0.15 * (0.3 + Math.random() * 0.7);
            const dryWidth = radius * 0.02 * (0.2 + Math.random() * 0.8);
            const dryAngle = angle + Math.PI + (Math.random() - 0.5) * 1;
            
            // –ü—Ä–µ—Ä—ã–≤–∏—Å—Ç–∞—è –ª–∏–Ω–∏—è
            const segments = 2 + Math.floor(Math.random() * 3);
            const segmentLength = dryLength / segments;
            
            ctx.strokeStyle = this.darkenColor(color, 15 + Math.random() * 25);
            ctx.lineWidth = dryWidth;
            ctx.globalAlpha = 0.5 * this.dryBrushEffect;
            
            for (let j = 0; j < segments; j++) {
                const startRatio = j / segments;
                const endRatio = (j + 0.7) / segments;
                
                ctx.beginPath();
                ctx.moveTo(
                    dryX + Math.cos(dryAngle) * dryLength * startRatio,
                    dryY + Math.sin(dryAngle) * dryLength * startRatio
                );
                ctx.lineTo(
                    dryX + Math.cos(dryAngle) * dryLength * endRatio,
                    dryY + Math.sin(dryAngle) * dryLength * endRatio
                );
                ctx.stroke();
            }
        }
        
        ctx.globalAlpha = 1;
    }

    addInkBleeding(ctx, x, y, radius, color, pressure) {
        // –†–∞—Å—Ç–µ–∫–∞–Ω–∏–µ —Ç—É—à–∏ –ø–æ –±—É–º–∞–≥–µ
        const bleedCount = Math.floor(this.bleeding * 6);
        
        for (let i = 0; i < bleedCount; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = radius * (1 + Math.random() * 0.4);
            
            const bleedX = x + Math.cos(angle) * distance;
            const bleedY = y + Math.sin(angle) * distance;
            
            const bleedSize = radius * 0.2 * (0.3 + Math.random() * 0.5);
            const bleedOpacity = this.bleeding * (0.2 + Math.random() * 0.3);
            
            const bleedGradient = ctx.createRadialGradient(
                bleedX, bleedY, 0,
                bleedX, bleedY, bleedSize
            );
            
            bleedGradient.addColorStop(0, this.blendColors(color, '#8B4513', 0.4));
            bleedGradient.addColorStop(1, 'rgba(139, 69, 19, 0)');
            
            ctx.fillStyle = bleedGradient;
            ctx.globalAlpha = bleedOpacity;
            ctx.beginPath();
            ctx.arc(bleedX, bleedY, bleedSize, 0, Math.PI * 2);
            ctx.fill();
        }
        
        ctx.globalAlpha = 1;
    }

    getParameters() {
        const baseParams = super.getParameters();
        
        return {
            ...baseParams,
            inkFlow: {
                min: 0.3,
                max: 1,
                step: 0.01,
                default: this.inkFlow,
                name: '–¢–µ—á–µ–Ω–∏–µ —Ç—É—à–∏',
                type: 'range'
            },
            brushSaturation: {
                min: 0.5,
                max: 1,
                step: 0.01,
                default: this.brushSaturation,
                name: '–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –∫–∏—Å—Ç–∏',
                type: 'range'
            },
            paperAbsorption: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.paperAbsorption,
                name: '–í–ø–∏—Ç—ã–≤–∞–Ω–∏–µ –±—É–º–∞–≥–æ–π',
                type: 'range'
            },
            bleeding: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.bleeding,
                name: '–†–∞—Å—Ç–µ–∫–∞–Ω–∏–µ',
                type: 'range'
            },
            lineVariation: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.lineVariation,
                name: '–í–∞—Ä–∏–∞—Ü–∏—è –ª–∏–Ω–∏–∏',
                type: 'range'
            },
            dryBrushEffect: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.dryBrushEffect,
                name: '–≠—Ñ—Ñ–µ–∫—Ç —Å—É—Ö–æ–π –∫–∏—Å—Ç–∏',
                type: 'range'
            },
            inkDensity: {
                min: 0.7,
                max: 1,
                step: 0.01,
                default: this.inkDensity,
                name: '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç—É—à–∏',
                type: 'range'
            }
        };
    }

    serialize() {
        const baseData = super.serialize();
        return {
            ...baseData,
            inkFlow: this.inkFlow,
            brushSaturation: this.brushSaturation,
            paperAbsorption: this.paperAbsorption,
            bleeding: this.bleeding,
            lineVariation: this.lineVariation,
            dryBrushEffect: this.dryBrushEffect,
            inkDensity: this.inkDensity
        };
    }

    deserialize(data) {
        super.deserialize(data);
        this.inkFlow = data.inkFlow || 0.8;
        this.brushSaturation = data.brushSaturation || 0.9;
        this.paperAbsorption = data.paperAbsorption || 0.6;
        this.bleeding = data.bleeding || 0.3;
        this.lineVariation = data.lineVariation || 0.7;
        this.dryBrushEffect = data.dryBrushEffect || 0.4;
        this.inkDensity = data.inkDensity || 0.95;
    }
}

/**
 * DigitalArtBrush - –∫–∏—Å—Ç—å –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞—Ä—Ç–∞
 * –°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã
 */
class DigitalArtBrush extends BrushBase {
    constructor() {
        super();
        this.name = '–¶–∏—Ñ—Ä–æ–≤–æ–π –ê—Ä—Ç';
        this.description = '–ö–∏—Å—Ç—å –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞—Ä—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏';
        this.category = 'digital';
        this.version = '1.0.0';
        this.author = 'ArtFlow Team';
        this.icon = 'üíæ';
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞—Ä—Ç–∞
        this.pixelSize = 2;
        this.glitchIntensity = 0.3;
        this.chromaticAberration = 0.2;
        this.noisePattern = 'digital';
        this.scanlines = 0.4;
        this.colorDepth = 8;
        this.compressionArtifacts = 0.1;
    }

    draw(ctx, x, y, pressure = 1, options = {}) {
        const radius = (options.size || this.size) * pressure;
        const color = options.color || this.primaryColor;
        
        this.createDigitalEffect(ctx, x, y, radius, color, pressure);
    }

    createDigitalEffect(ctx, x, y, radius, color, pressure) {
        ctx.save();
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞–∑–æ–∫
        this.drawDigitalBase(ctx, x, y, radius, color, pressure);
        
        // –ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è
        if (this.pixelSize > 1) {
            this.addPixelation(ctx, x, y, radius, color, pressure);
        }
        
        // –¶–∏—Ñ—Ä–æ–≤–æ–π —à—É–º
        this.addDigitalNoise(ctx, x, y, radius, color, pressure);
        
        // –ì–ª—é—á-—ç—Ñ—Ñ–µ–∫—Ç—ã
        if (this.glitchIntensity > 0) {
            this.addGlitchEffect(ctx, x, y, radius, color, pressure);
        }
        
        // –•—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–±–µ—Ä—Ä–∞—Ü–∏—è
        if (this.chromaticAberration > 0) {
            this.addChromaticAberration(ctx, x, y, radius, color, pressure);
        }
        
        // –°–∫–∞–Ω–ª–∞–π–Ω—ã
        if (this.scanlines > 0) {
            this.addScanlines(ctx, x, y, radius, color, pressure);
        }
        
        ctx.restore();
    }

    drawDigitalBase(ctx, x, y, radius, color, pressure) {
        // –ë–∞–∑–æ–≤—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞–∑–æ–∫ —Å —á–µ—Ç–∫–∏–º–∏ –∫—Ä–∞—è–º–∏
        const colorDepthFactor = this.colorDepth / 8;
        
        // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—è—Ç–Ω–æ
        ctx.fillStyle = color;
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fill();
        
        // –¶–∏—Ñ—Ä–æ–≤–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        const gradient = ctx.createRadialGradient(x, y, radius * 0.7, x, y, radius);
        gradient.addColorStop(0, this.lightenColor(color, 20 * colorDepthFactor));
        gradient.addColorStop(1, this.darkenColor(color, 30 * colorDepthFactor));
        
        ctx.fillStyle = gradient;
        ctx.globalAlpha = 0.6;
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fill();
        ctx.globalAlpha = 1;
    }

    addPixelation(ctx, x, y, radius, color, pressure) {
        // –ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        const pixelSize = this.pixelSize;
        const pixelRadius = radius;
        
        ctx.save();
        ctx.imageSmoothingEnabled = false;
        
        // –°–æ–∑–¥–∞–µ–º –ø–∏–∫—Å–µ–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        const pixelCount = Math.floor(pixelRadius / pixelSize);
        
        for (let i = -pixelCount; i <= pixelCount; i++) {
            for (let j = -pixelCount; j <= pixelCount; j++) {
                const pixelX = x + i * pixelSize;
                const pixelY = y + j * pixelSize;
                
                const distance = Math.sqrt(i*i + j*j) * pixelSize;
                if (distance > pixelRadius) continue;
                
                // –í–∞—Ä–∏–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–∏–∫—Å–µ–ª–µ–π
                const brightness = (Math.random() - 0.5) * 10;
                const pixelColor = brightness > 0
                    ? this.lightenColor(color, brightness)
                    : this.darkenColor(color, -brightness);
                
                ctx.fillStyle = pixelColor;
                ctx.fillRect(pixelX, pixelY, pixelSize, pixelSize);
            }
        }
        
        ctx.restore();
    }

    addDigitalNoise(ctx, x, y, radius, color, pressure) {
        // –¶–∏—Ñ—Ä–æ–≤–æ–π —à—É–º
        const noiseIntensity = 0.3;
        const noiseCount = Math.floor(radius * radius * 0.3);
        
        for (let i = 0; i < noiseCount; i++) {
            const noiseX = x + (Math.random() - 0.5) * radius * 2;
            const noiseY = y + (Math.random() - 0.5) * radius * 2;
            
            const noiseSize = 0.5 + Math.random() * 2;
            let noiseColor;
            
            switch (this.noisePattern) {
                case 'monochrome':
                    noiseColor = Math.random() > 0.5 ? '#FFFFFF' : '#000000';
                    break;
                case 'rgb':
                    const colors = ['#FF0000', '#00FF00', '#0000FF'];
                    noiseColor = colors[Math.floor(Math.random() * colors.length)];
                    break;
                case 'digital':
                default:
                    noiseColor = Math.random() > 0.7 ? '#00FF00' : '#000000';
                    break;
            }
            
            ctx.fillStyle = noiseColor;
            ctx.globalAlpha = noiseIntensity * Math.random();
            ctx.fillRect(noiseX, noiseY, noiseSize, noiseSize);
        }
        
        ctx.globalAlpha = 1;
    }

    addGlitchEffect(ctx, x, y, radius, color, pressure) {
        // –ì–ª—é—á-—ç—Ñ—Ñ–µ–∫—Ç—ã
        const glitchCount = Math.floor(this.glitchIntensity * 5);
        
        for (let i = 0; i < glitchCount; i++) {
            const glitchY = y + (Math.random() - 0.5) * radius * 0.5;
            const glitchWidth = radius * (0.2 + Math.random() * 0.8);
            const glitchHeight = 2 + Math.random() * 8;
            
            const glitchOffset = (Math.random() - 0.5) * radius * 0.3;
            
            ctx.fillStyle = color;
            ctx.globalAlpha = 0.8 * this.glitchIntensity;
            ctx.fillRect(x - glitchWidth/2 + glitchOffset, glitchY - glitchHeight/2, glitchWidth, glitchHeight);
        }
        
        ctx.globalAlpha = 1;
    }

    addChromaticAberration(ctx, x, y, radius, color, pressure) {
        // –•—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–±–µ—Ä—Ä–∞—Ü–∏—è
        const offset = radius * 0.02 * this.chromaticAberration;
        
        // –ö—Ä–∞—Å–Ω—ã–π –∫–∞–Ω–∞–ª
        ctx.fillStyle = '#FF0000';
        ctx.globalAlpha = 0.3 * this.chromaticAberration;
        ctx.beginPath();
        ctx.arc(x - offset, y, radius, 0, Math.PI * 2);
        ctx.fill();
        
        // –°–∏–Ω–∏–π –∫–∞–Ω–∞–ª
        ctx.fillStyle = '#0000FF';
        ctx.beginPath();
        ctx.arc(x + offset, y, radius, 0, Math.PI * 2);
        ctx.fill();
        
        ctx.globalAlpha = 1;
    }

    addScanlines(ctx, x, y, radius, color, pressure) {
        // –°–∫–∞–Ω–ª–∞–π–Ω—ã
        const lineCount = Math.floor(radius * 2 * this.scanlines);
        
        ctx.fillStyle = '#000000';
        ctx.globalAlpha = 0.1 * this.scanlines;
        
        for (let i = 0; i < lineCount; i++) {
            const lineY = y - radius + (i / lineCount) * radius * 2;
            const lineHeight = 1;
            
            ctx.fillRect(x - radius, lineY, radius * 2, lineHeight);
        }
        
        ctx.globalAlpha = 1;
    }

    getParameters() {
        const baseParams = super.getParameters();
        
        return {
            ...baseParams,
            pixelSize: {
                min: 1,
                max: 8,
                step: 1,
                default: this.pixelSize,
                name: '–†–∞–∑–º–µ—Ä –ø–∏–∫—Å–µ–ª—è',
                type: 'range'
            },
            glitchIntensity: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.glitchIntensity,
                name: '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≥–ª—é–∫–æ–≤',
                type: 'range'
            },
            chromaticAberration: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.chromaticAberration,
                name: '–•—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–±–µ—Ä—Ä–∞—Ü–∏—è',
                type: 'range'
            },
            noisePattern: {
                type: 'select',
                options: [
                    { value: 'digital', label: '–¶–∏—Ñ—Ä–æ–≤–æ–π' },
                    { value: 'monochrome', label: '–ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π' },
                    { value: 'rgb', label: 'RGB' }
                ],
                default: this.noisePattern,
                name: '–ü–∞—Ç—Ç–µ—Ä–Ω —à—É–º–∞'
            },
            scanlines: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.scanlines,
                name: '–°–∫–∞–Ω–ª–∞–π–Ω—ã',
                type: 'range'
            },
            colorDepth: {
                min: 1,
                max: 16,
                step: 1,
                default: this.colorDepth,
                name: '–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞',
                type: 'range'
            },
            compressionArtifacts: {
                min: 0,
                max: 1,
                step: 0.01,
                default: this.compressionArtifacts,
                name: '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–∂–∞—Ç–∏—è',
                type: 'range'
            }
        };
    }

    serialize() {
        const baseData = super.serialize();
        return {
            ...baseData,
            pixelSize: this.pixelSize,
            glitchIntensity: this.glitchIntensity,
            chromaticAberration: this.chromaticAberration,
            noisePattern: this.noisePattern,
            scanlines: this.scanlines,
            colorDepth: this.colorDepth,
            compressionArtifacts: this.compressionArtifacts
        };
    }

    deserialize(data) {
        super.deserialize(data);
        this.pixelSize = data.pixelSize || 2;
        this.glitchIntensity = data.glitchIntensity || 0.3;
        this.chromaticAberration = data.chromaticAberration || 0.2;
        this.noisePattern = data.noisePattern || 'digital';
        this.scanlines = data.scanlines || 0.4;
        this.colorDepth = data.colorDepth || 8;
        this.compressionArtifacts = data.compressionArtifacts || 0.1;
    }
}